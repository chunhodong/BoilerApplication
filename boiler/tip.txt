1. 데이터유효성 검증로직은Dto에 어노테이션으로처리(이메일형식,비밀번호길이 등등,NOT NULL)
   Entity에는 NOT NULL조건만 추가하여, 비즈니스로직에 의존하지 않게 부여

 - Dto에 검증로직을 부여하여 Dto를 사용하는 컨트롤러나 서비스가 코드중복없이 같은 코드를 사용할수있음
   추가적으로 검증로직을 어노테이션으로 대체한다면 간결하게 유효성 검증이가능
 - 로직을 직접 작성안하고 어노테이션으로 했을때 단점은 검증규칙이 복잡할경우 어노테이션으로 대체하기 힘들수있음
   - 이경우 커스텀 어노테이션 작성을 고려해볼수있음

 - Entity에는 필요할경우 검증로직을 추가할수있음 Entity에 검증로직을 추가했을때 장점은 개발자의 실수를
   줄여줄수있음, 만약 새로운 기능을 만들고 상위 레이어에서 유효성검증로직을 실수로 안넣었다면 Entity에서 이를 막아줄수있음
   단점은 Entity책임이 늘어나게되고 Entity가 화면영역에 의존하게됨 단 Entity에 로직이
   자체가 필요없는게 아니라 입력데이터의 유효성검증에 경우를 말함
 - 다만 DB칼럼의 유효성규칙에 해당하는 NOT NULL조건은 추가

 - Service Layer도 위에 Entity처럼 검증로직을 추가할순있지만, Entity에서 추가했을때와 같은 문제발생
   하지만 Service Layer에서 검증로직이 필요한 상황이 존재할수있음, 만약 팀 상황상 서비스레이어만 테스트코드를
   작성해야한다면, 무결성을 위해 Service Layer에도 입력값 검증이 필요할수도있음 이때는 자바에서 제공하는 Validator를 이용하면
   모든DTO에 적용가능한 검증로직작성가능

 --------------------------------------------------------------------------------------
